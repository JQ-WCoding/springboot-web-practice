// 의존성 주입 springboot 버전을 전역변수로 사용
buildscript {
    ext{
        springBootVersion = '2.1.9.RELEASE'
    }
    repositories{
        // 본인이 만든 라이브러리 업로드가 힘듬
        mavenCentral()
        // 라이브러리 업로드 간결화
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}
// 플러그인 의존성 적용
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
// ? 위와 같은거 아닌가?
// 그래서 넣어보았다
//plugins {
//    id 'java'
//    id 'eclipse'
//    id 'org.springframework.boot'
//    id 'io.spring.dependency-management'
//}

group 'com.junq.study'
version '1.0-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
//    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
//    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    compile('org.springframework.boot:spring-boot-starter-web')
    testCompile('org.springframework.boot:spring-boot-starter-test')
    compile('org.projectlombok:lombok')
    // 책에서 없던 부분
    // 어노테이션을 프로세서를 통해 해당 기본생성자와 getter setter가 읽힐 수 있도록 해야하는 것 같다.
    annotationProcessor('org.projectlombok:lombok:1.18.20')
    // JPA 추상화 라이브러리
    // 스프이 부트 버전에 맞춰 자동으로 jpa 관련 라이브러리 버전 관리
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    // 인모메리 관계형 데이터베이스
    compile('com.h2database:h2')
    // 머스테치 의존성 주입
    compile('org.springframework.boot:spring-boot-starter-mustache')
    // security 관련 의존성
    // 클라이언트 입장에 소셜 기능 구현 시 필요
    compile('org.springframework.boot:spring-boot-starter-oauth2-client')
    compile('org.springframework.session:spring-session-jdbc')
}

//test {
//    useJUnitPlatform()
//}